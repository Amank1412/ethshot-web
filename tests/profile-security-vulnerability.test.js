/**
 * Profile Security Vulnerability Test
 * 
 * This test demonstrates the critical security vulnerability where anyone
 * can modify anyone else's profile by calling the database function directly.
 * 
 * Framework: Mocha with Chai
 */

import { expect } from 'chai';
import { createClient } from '@supabase/supabase-js';

// Test configuration
const SUPABASE_URL = process.env.SUPABASE_URL || process.env.VITE_SUPABASE_URL;
const SUPABASE_ANON_KEY = process.env.SUPABASE_ANON_KEY || process.env.VITE_SUPABASE_ANON_KEY;

describe('Profile Security Vulnerability Tests', () => {
  let supabase;
  const victimWallet = '0x1234567890123456789012345678901234567890';
  const attackerWallet = '0xabcdefabcdefabcdefabcdefabcdefabcdefabcd';

  before(() => {
    if (!SUPABASE_URL || !SUPABASE_ANON_KEY) {
      throw new Error('Missing Supabase configuration for tests');
    }
    supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY);
  });

  describe('CRITICAL: Unauthorized Profile Modification', () => {
    it('should FAIL - anyone can modify any profile via direct database call', async () => {
      // This test demonstrates the vulnerability
      // An attacker can modify any user's profile without authentication
      
      try {
        // Attacker calls the database function directly to modify victim's profile
        const { data, error } = await supabase.rpc('upsert_user_profile_secure', {
          p_wallet_address: victimWallet,
          p_nickname: 'HACKED_BY_ATTACKER',
          p_bio: 'This profile was compromised due to security vulnerability'
        });

        if (error) {
          // This is what SHOULD happen - the call should fail
          console.log('✅ Good: Direct database call was blocked:', error.message);
          expect(error).to.exist;
          expect(error.message).to.include('permission denied');
        } else {
          // This is the VULNERABILITY - the call succeeded
          console.log('❌ CRITICAL VULNERABILITY: Unauthorized profile modification succeeded!');
          console.log('Modified profile data:', data);
          
          // This test will fail to highlight the security issue
          expect.fail('CRITICAL SECURITY VULNERABILITY: Unauthorized profile modification was allowed!');
        }
      } catch (testError) {
        // If there's a test setup error, that's different from the security test
        if (testError.message.includes('CRITICAL SECURITY VULNERABILITY')) {
          throw testError;
        }
        console.log('Test setup error (not the security issue):', testError.message);
      }
    });

    it('should FAIL - unauthenticated user can create profiles for any wallet', async () => {
      const randomWallet = '0x' + Math.random().toString(16).substring(2, 42).padStart(40, '0');
      
      try {
        const { data, error } = await supabase.rpc('upsert_user_profile_secure', {
          p_wallet_address: randomWallet,
          p_nickname: 'FAKE_PROFILE',
          p_bio: 'Created without owning this wallet'
        });

        if (error) {
          console.log('✅ Good: Unauthorized profile creation was blocked:', error.message);
          expect(error).to.exist;
        } else {
          console.log('❌ VULNERABILITY: Unauthorized profile creation succeeded for:', randomWallet);
          expect.fail('SECURITY VULNERABILITY: Unauthorized profile creation was allowed!');
        }
      } catch (testError) {
        if (testError.message.includes('SECURITY VULNERABILITY')) {
          throw testError;
        }
        console.log('Test setup error:', testError.message);
      }
    });
  });

  describe('Expected Secure Behavior', () => {
    it('should require valid JWT authentication for profile updates', async () => {
      // This test shows what the secure behavior should be
      // Profile updates should only work through the API with valid JWT
      
      const response = await fetch(`${SUPABASE_URL.replace('/rest/v1', '')}/api/profile`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          // Missing Authorization header - should fail
        },
        body: JSON.stringify({
          action: 'upsert',
          profileData: {
            nickname: 'Should Not Work',
            bio: 'This should be rejected'
          }
        })
      });

      expect(response.status).to.equal(401);
      const result = await response.json();
      expect(result.success).to.be.false;
      expect(result.error).to.include('Authorization header required');
    });

    it('should reject invalid JWT tokens', async () => {
      const response = await fetch(`${SUPABASE_URL.replace('/rest/v1', '')}/api/profile`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': 'Bearer invalid_token_here'
        },
        body: JSON.stringify({
          action: 'upsert',
          profileData: {
            nickname: 'Should Not Work',
            bio: 'This should be rejected'
          }
        })
      });

      expect(response.status).to.equal(401);
      const result = await response.json();
      expect(result.success).to.be.false;
      expect(result.error).to.include('Invalid or expired token');
    });
  });
});